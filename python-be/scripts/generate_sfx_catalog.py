#!/usr/bin/env python3
"""Generate the SFX catalog consumed by the Remotion frontend."""

from __future__ import annotations

import argparse
import pathlib
import sys

REPO_ROOT = pathlib.Path(__file__).resolve().parents[2]
ASSETS_SFX_DIR = REPO_ROOT / "assets" / "sfx"
CATALOG_PATH = REPO_ROOT / "remotion-app" / "src" / "data" / "sfxCatalog.ts"

HEADER = """// This file is auto-generated by python-be/scripts/generate_sfx_catalog.py.\n"""


def discover_sfx() -> list[str]:
    if not ASSETS_SFX_DIR.exists():
        raise SystemExit(f"SFX directory not found: {ASSETS_SFX_DIR}")

    assets: list[str] = []
    for path in sorted(ASSETS_SFX_DIR.rglob("*")):
        if not path.is_file():
            continue
        relative = path.relative_to(ASSETS_SFX_DIR).as_posix()
        assets.append(relative)
    return assets


def write_catalog(entries: list[str]) -> None:
    with CATALOG_PATH.open("w", encoding="utf-8") as target:
        target.write(HEADER)
        target.write("export const SFX_CATALOG = [\n")
        for entry in entries:
            target.write(f"  'assets/sfx/{entry}',\n")
        target.write("] as const;\n")


def main(argv: list[str]) -> int:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.parse_args(argv)

    entries = discover_sfx()
    write_catalog(entries)
    return 0


if __name__ == "__main__":
    raise SystemExit(main(sys.argv[1:]))
