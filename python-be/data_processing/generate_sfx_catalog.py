#!/usr/bin/env python3
"""Generate the SFX catalog consumed by the Remotion frontend."""

from __future__ import annotations

import argparse
import pathlib
import sys


def resolve_repo_root() -> pathlib.Path:
    """
    Walk upwards from this file's directory to find the repository root.
    The root is considered the first ancestor that contains an `assets` directory.
    """
    current = pathlib.Path(__file__).resolve().parent
    for candidate in (current, *current.parents):
        if (candidate / "assets").exists():
            return candidate
    return current


REPO_ROOT = resolve_repo_root()
ASSETS_SFX_DIR = REPO_ROOT / "assets" / "sfx"
CATALOG_PATH = REPO_ROOT / "remotion-app" / "src" / "data" / "sfxCatalog.ts"

HEADER = """// This file is auto-generated by python-be/data_processing/generate_sfx_catalog.py.\n"""


def discover_sfx() -> list[str]:
    """
    Discovers all SFX files within the ASSETS_SFX_DIR and returns their
    relative POSIX paths.

    Returns:
        A list of relative paths to SFX files (e.g., 'cartoon/boing.mp3').

    Raises:
        SystemExit: If the SFX directory does not exist.
    """
    if not ASSETS_SFX_DIR.exists():
        raise SystemExit(f"SFX directory not found: {ASSETS_SFX_DIR}")

    assets: list[str] = []
    # Recursively glob for all files in the SFX directory
    for path in sorted(ASSETS_SFX_DIR.rglob("*")):
        if not path.is_file():
            continue
        # Get the path relative to the SFX directory and convert to POSIX style
        relative = path.relative_to(ASSETS_SFX_DIR).as_posix()
        assets.append(relative)
    return assets


def write_catalog(entries: list[str]) -> None:
    """
    Writes the discovered SFX entries to a TypeScript file (sfxCatalog.ts)
    in a format consumable by the Remotion frontend.

    Args:
        entries: A list of relative SFX paths.
    """
    with CATALOG_PATH.open("w", encoding="utf-8") as target:
        target.write(HEADER) # Add auto-generated header
        target.write("export const SFX_CATALOG = [\n")
        for entry in entries:
            target.write(f"  'assets/sfx/{entry}',\n") # Format each entry
        target.write("] as const;\n")


def main(argv: list[str]) -> int:
    """
    Main entry point for the script. Discovers SFX assets and writes them
    to the sfxCatalog.ts file.

    Args:
        argv: Command-line arguments.

    Returns:
        An exit code (0 for success).
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.parse_args(argv) # Parse arguments (currently none are defined beyond description)

    entries = discover_sfx()
    write_catalog(entries)
    return 0


if __name__ == "__main__":
    raise SystemExit(main(sys.argv[1:]))
